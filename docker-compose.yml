version: '3'

services:
  database:
    image: postgres:latest
    container_name: database
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./database/init:/docker-entrypoint-initdb.d
      - database-data:/var/lib/postgresql/data
    networks:
      - backend_network
    
  cache:
    image: redis:latest
    container_name: cache
    restart: always
    volumes:
      - cache-data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - backend_network
  
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    depends_on:
      - database
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - backend_network
    ports:
      - '8888:80'
    
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    restart: always
    depends_on:
      - cache
    volumes:
      - redisinsight-data:/db
    networks:
      - backend_network
    ports:
      - "8001:8001"
    
  api:
    image: python:3.10
    container_name: api
    restart: always
    depends_on:
      - database
      - cache
    env_file:
      - .env
    volumes:
      - ./api/app:/app/
    command: bash -c "cd app && pip install --no-cache-dir --upgrade -r requirements.txt && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    networks:
      - backend_network
      - frontend_network
    healthcheck:
      test: curl --fail http://api/test || exit 1 
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    ports:
      - '63:8000' # remove in production
  
  frontend:
    image: node:20-alpine3.17
    container_name: frontend
    restart: always
    depends_on:
      - api
    volumes:
      - ./frontend/app:/app/
    command: /bin/sh -c "cd app && npm install && npm run dev" # <-- only while in development
    networks:
      - frontend_network
    ports:
      - 7525:3000
    healthcheck:
      test: curl --fail http://frontend || exit 1 
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

volumes:
  database-data:
  cache-data:
  pgadmin-data:
  redisinsight-data:

networks:
  backend_network:
  frontend_network: